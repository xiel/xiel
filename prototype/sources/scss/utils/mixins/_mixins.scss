/******************************************
	Responsive min-height based on width
******************************************/
@mixin responsive-min-height($heightPercent) {
	&:before {
		float: left;
		width: 1px;
		margin-left: -1px;
		padding-bottom: $heightPercent;
		content: " ";
	}
	&:after {
		content: "";
		clear: both;
		display: table;
	}
}

/******************************************
	Breakpoints
******************************************/
@mixin breakpoint($max, $min: "") {
	@if $min != "" {
		@media only screen and (min-width: $min) and (max-width: $max) {
			@content;
		}
	} @else {
		@media only screen and (max-width: $max) {
			@content;
		}
	}
}

/******************************************
	Grunticon mixin
	usage: @include grunticon(icon-my-svg);
******************************************/
@mixin grunticon($name) {
	@extend %icon-#{$name};
	
	.no-svg &,
	.no-js & {
		@extend %icon-fallback-#{$name};
	}
}

/******************************************
	rem mixin
******************************************/
//
// 'rem' is a Sass mixin that converts pixel values to rem values for whatever property is passed to it.
// It returns two lines of code, one of the regular pixel values (for IE), and another with the
// converted rem values (for everyone else). Special thanks to Chris Epstein (http://chriseppstein.github.com)
// and Martin Bavio (http://martinbavio.com) for the help and code!
//
// Sample input:
// .element {
//     @include rem('padding', 10px 0 2px 5px);
// }
//
// Sample output:
// .element {
//     padding: 10px 0 2px 5px;
//     padding: 1rem 0 0.2rem 0.5rem;
// }
//
// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
//

$baseline_px: 10px;

@mixin rem($property, $px_values) {
	// Convert the baseline into rems
	$baseline_rem: $baseline_px / 1rem;
	// Print the first line in pixel values
	#{$property}: $px_values;
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px_values) == "number" {
		#{$property}: $px_values / $baseline_rem;
	}
	@else {
		// Create an empty list that we can dump values into
		$rem_values: ();
		@each $value in $px_values {
			// If the value is zero, return 0
			@if $value == 0 {
				$rem_values: append($rem_values, $value);
			}
			@else {
				$rem_values: append($rem_values, $value / $baseline_rem);
			}
		}
		// Return the property and its list of converted values
		#{$property}: $rem_values;
	}
}


/******************************************
	% (percent) mixin
******************************************/

// converts pixel into percentage based on a context width (or var)
//
// Sample input:
// .element {
//     @include cp('padding',10px 0 2px 5px, 980px);
// }
//
// Sample output:
// .element {
//     padding: 1.02041% 0 0.204082% 0.510204%; // 10px 0 2px 5px
// }
//
// neccessary unitless function to prevent sass errors in calculation
//

// Turn numbers with units into unitless numbers (https://github.com/nex3/sass/issues/533)
@function clear-units($value) {
	@if type-of($value) == "number" {
		@if unitless($value) {
			@return $value;
		}
		@else if unit($value) == "em" {
			@return $value / 1em;
		}
		@else if unit($value) == "px" {
			@return $value / 1px;
		}
		@else if unit($value) == "pt" {
			@return $value / 1pt;
		}
	}
	@else {
		@warn "Not a number value: #{$value}";
		@return $value;
	}
}

// Percent calculation mixin
@mixin cp($property, $px_values, $context) {
	// clear up all units to prevent sass errors
	// cycle trough box model values
	$unitless_values: ();
	@each $value in $px_values {
		// If the value is zero, return 0
		@if $value == 0 {
			$unitless_values: append($unitless_values, $value);
		}
		@else {
			$unitless_values: append($unitless_values, clear-units($value));
		}
	}
	// just one value possible here
	$unitless_context: clear-units($context);
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($unitless_values) == "number" {
		#{$property}: $unitless_values / $unitless_context * 100%;
	}
	@else {
		// Create an empty list that we can dump values into
		$percent_values: ();
		@each $value in $unitless_values {
			// If the value is zero, return 0
			@if $value == 0 {
				$percent_values: append($percent_values, $value);
			}
			@else {
				$percent_values: append($percent_values, $value / $unitless_context * 100%);
			}
		}
		// Return the property and its list of converted values
		#{$property}: $percent_values;
	}
}

// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

$placeholders: '-webkit-input-placeholder',
               '-moz-placeholder',
               '-ms-input-placeholder';

@mixin placeholder {
  @each $placeholder in $placeholders {
    @if $placeholder == "-webkit-input-placeholder" {
      &::#{$placeholder} {
        @content;
      }
    }
    @else if $placeholder == "-moz-placeholder" {
      // FF 18-
      &:#{$placeholder} {
        @content;
      }

      // FF 19+
      &::#{$placeholder} {
        @content;
      }
    }
    @else {
      &:#{$placeholder} {
        @content;
      }
    }
  }
}
