/* ===================================================
SECTION STAGE
=================================================== */

.stage {
	position: relative;
	background: #d2d2ce;
	overflow: hidden;
	background-size: 100% auto;
	transform: translateZ(0.00001px);
	height: 50vw;
	max-height: 90vh;
	justify-content: center;

	.btn {
		background: #d2d2ce;
	}

	@media (max-width: $screen-sm-max) {
		padding-top: 80px;
	}

	@media (max-width: $screen-xs-max) {
		height: auto;

		.btn {
			width: 100%;
		}
	}
}


.xiel-logo {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	width: 9rem;
	height: 9rem;
	margin: 4.5rem auto 0;
	z-index: 9999;

	a {
		position: relative;
		@extend %ir;
		display: block;
		overflow: hidden;
		margin: 0 auto;
		width: 100%;
		height: 100%;
		z-index: 1;
	}

	h1, svg {
		position: absolute;
		margin: 0;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}

	path.x {
		transform-origin: 250px 250px 0px;
		transition: 0ms;
		transform: rotate(0.01deg);
	}

	&:hover {
		path.x {
			transition: 400ms cubic-bezier(.62,1.37,.52,.95);
			transform: rotate(90deg);
		}
	}

	@media (max-width: $screen-sm-max) {
		width: 8rem;
		height: 8rem;
	}

	@media (max-width: $screen-xs-max) {
		margin-top: 2rem;
		width: 6rem;
		height: 6rem;
		left: 2rem;
		right: auto;
	}
}

.welcoming {
	position: relative;
	font-size: 2rem;
	width: 62%;
	max-width: 546px;

	@media (max-width: $screen-xs) {
		width: auto;
		padding-bottom: 30%;
	}
}

.stage-hello {
	display: block;
	color: $color-key;
	font-size: 6.4rem;
	font-weight: 100;
	letter-spacing: -.03em;
	font-weight: 500;

	@media (max-width: $screen-xs-max) {
		font-size: 5rem;
	}
}

body > .wrapper {
	padding-top: 150%;
	background: greenyellow;
}

.stage {
	// overflow: visible;
	outline: 1px solid red;
	border: 1px solid blue;
}

/*
* @prop {String} from='-100eh' Start point of in range position relative to viewport top. 
* Can be a simple calculation (addition and subtraction) with the following units (vh = viewport height / 100, vw = viewport width / 100, eh = element height  / 100, ew = element width / 100, px).
* 
* @prop {String} to='100vh' End point of in range position relative to viewport top.
* Example: '100vh' places the top of the element at the bottom of the viewport.
* '100vh - 20eh' Means 20% of the elements top is visible at the bottom of the viewport.
            
 */
$scrollyJSCFG: (
	switchedOff: false,
	from: '-90eh+0vh', //-100e
	to: '-10eh+0vh', //100eh,   -10eh+100vh
	once: false,
	restSwitchedOff: true,
	childSel: 'find(.scrolly-element)',
	throttleDelay: 0,
);

.rb-scrolly {
	@include rb-js-export($scrollyJSCFG);
}

.stage-hero {
	position: absolute;
	bottom: 0;
	right: 0;
	width: 100%;
	// transform: translateY(0.0px);
	will-change: transform;
	backface-visibility: hidden;

	@media (max-width: $screen-sm-max) {
		right: -5%;
	}
	@media (max-width: $screen-xs) {
		right: 0;
	}

	&.scrolly-element {
		opacity: 1;
		bottom: 0;

		&::before {
			// content: '{"opacity": 0, "bottom": "10vw"}' !important;
			visibility: hidden !important;
			display: block !important;
			height: 0 !important;
			width: 100%;
			clear: both;
		}

		@include rb-js-export((
			right: 180,
			bottom: 0,
			opacity: 0,
			backgroundColor: 'rgba(200, 230, 0, 0.4)',
			transform: (
				value: 'rotate(30deg)',
				start: 'rotate(0deg)',
			),
			easing: '(0.175, 0.885, 0.320, 1.275)',
		));
	}

	img {
		display: block;
		height: auto;
		width: 100%;
		max-width: 100%;
		margin: 0 auto;

		@media (min-width: 2000px) {
			width: auto;
		}
	}

	.blurred {
		position: absolute;
		top: 0;
	}

	&:after {
		@extend %pseudo;
		width: 20px;
		height: 200%;
		bottom: 0;
		background: hotpink;
		z-index: 99;
	}
}